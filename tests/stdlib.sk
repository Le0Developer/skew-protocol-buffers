# Select parts of https://github.com/Le0Developer/skew-vendor required to run
# protobuf

# cat stdlib/*.sk encoding/utf8.sk

namespace Exceptions {
  const UNWRAP_OPTION_NONE = Symbol.new("UNWRAP_OPTION_NONE")
  const UNWRAP_RESULT_ERROR = Symbol.new("UNWRAP_RESULT_ERROR")
  const UNWRAP_RESULT_OK = Symbol.new("UNWRAP_RESULT_OK")
  const UNREACHABLE = Symbol.new("UNREACHABLE")
}
type Option<T> : T {
  def isNone bool {
    return (self as dynamic) == null
  }
  def isSome bool {
    return (self as dynamic) != null
  }

  def unwrapUnchecked T {
    return self as T
  }

  def expect(error dynamic) T {
    return unwrapUnchecked ?? panic(error)
  }

  def unwrap T {
    return expect(Exceptions.UNWRAP_OPTION_NONE)
  }

  def unwrapOr(fallback T) T {
    return unwrapUnchecked ?? fallback
  }

  def unwrapOr(transform fn() T) T {
    return unwrapUnchecked ?? transform()
  }

  def okOr Result<T, Symbol> {
    return isNone ? err<T, Symbol>(Exceptions.UNWRAP_OPTION_NONE) : ok<T, Symbol>(unwrapUnchecked)
  }

  def okOr<E>(error E) Result<T, E> {
    return isNone ? err<T, E>(error) : ok<T, E>(unwrapUnchecked)
  }

  def okOr<E>(fallback fn() E) Result<T, E> {
    return isNone ? err<T, E>(fallback()) : ok<T, E>(unwrapUnchecked)
  }

  def filter(callback fn(T) bool) Option<T> {
    return isNone || callback(unwrapUnchecked) ? self : none<T>()
  }

  def map<U>(transform fn(T) U) Option<U> {
    return isNone ? none<U>() : some<U>(transform(unwrapUnchecked))
  }

  def mapOr<U>(fallback U, transform fn(T) U) U {
    return isNone ? fallback : transform(unwrapUnchecked)
  }

  def mapOr<U>(fallback fn() U, transform fn(T) U) U {
    return isNone ? fallback() : transform(unwrapUnchecked)
  }

  def tryOr(callback fn() Option<T>) Option<T> {
    return self ?? callback()
  }

  def iter List<T> {
    return isSome ? [unwrapUnchecked] : []
  }

  def toString string {
    return RELEASE ? (self as dynamic).toString() : isNone ? "None" : "Some(\(unwrapUnchecked as dynamic))"
  }
}

def some<T>(value T) Option<T> {
  return value as dynamic
}

def none<T> Option<T> {
  return null as dynamic
}
def panic(message dynamic) dynamic {
  throw message
}

def unreachable dynamic {
  return panic(Exceptions.UNREACHABLE)
}
def print(arg1 dynamic) {
  dynamic.console.log(arg1)
}
def print(arg1 dynamic, arg2 dynamic) {
  dynamic.console.log(arg1, arg2)
}
def print(arg1 dynamic, arg2 dynamic, arg3 dynamic) {
  dynamic.console.log(arg1, arg2, arg3)
}
def print(arg1 dynamic, arg2 dynamic, arg3 dynamic, arg4 dynamic) {
  dynamic.console.log(arg1, arg2, arg3, arg4)
}
def print(arg1 dynamic, arg2 dynamic, arg3 dynamic, arg4 dynamic, arg5 dynamic) {
  dynamic.console.log(arg1, arg2, arg3, arg4, arg5)
}
def print(arg1 dynamic, arg2 dynamic, arg3 dynamic, arg4 dynamic, arg5 dynamic, arg6 dynamic) {
  dynamic.console.log(arg1, arg2, arg3, arg4, arg5, arg6)
}
class Result<V, E> {
  var _ok Option<V>
  var _err Option<E>

  def unwrap V {
    return _ok.expect(Exceptions.UNWRAP_RESULT_ERROR)
  }

  def unwrapErr E {
    return _err.expect(Exceptions.UNWRAP_RESULT_OK)
  }

  def unwrapOr(fallback V) V {
    return _ok.unwrapOr(fallback)
  }

  def unwrapOr(fallback fn() V) V {
    return _ok.unwrapOr(fallback)
  }

  def expect(message dynamic) V {
    return _ok.expect(message)
  }

  def expectErr(message dynamic) E {
    return _err.expect(message)
  }

  def isOk bool {
    return _ok.isSome
  }

  def isErr bool {
    return _err.isSome
  }

  def ok Option<V> {
    return _ok
  }

  def err Option<E> {
    return _err
  }

  def map<U>(transform fn(V) U) Result<U, E> {
    return isOk ? Result<U, E>.new(some<U>(transform(_ok.unwrapUnchecked)), none<E>()) : self as dynamic
  }

  def mapErr<F>(transform fn(E) F) Result<V, F> {
    return isErr ? Result<V, F>.new(none<V>(), some<F>(transform(_err.unwrapUnchecked))) : self as dynamic
  }

  def mapOr<U>(fallback U, transform fn(V) U) U {
    return isOk ? transform(_ok.unwrapUnchecked) : fallback
  }

  def mapOrElse<U>(fallback fn() U, transform fn(V) U) U {
    return isOk ? transform(_ok.unwrapUnchecked) : fallback()
  }

  def replace<U>(value U) Result<U, E> {
    return isOk ? Result<U, E>.new(some<U>(value), none<E>()) : self as dynamic
  }

  def replaceErr<F>(error F) Result<V, F> {
    return isErr ? Result<V, F>.new(none<V>(), some<F>(error)) : self as dynamic
  }

  def iter List<V> {
    return isOk ? [_ok.unwrapUnchecked] : []
  }

  def toString string {
    return RELEASE ? (self as dynamic).toString() : isOk ? "Ok(\(_ok.unwrapUnchecked as dynamic))" : "Err(\(_err.unwrapUnchecked as dynamic))"
  }
}

def ok<V, E>(value V) Result<V, E> {
  return Result<V, E>.new(some<V>(value), none<E>())
}

def err<V, E>(error E) Result<V, E> {
  return Result<V, E>.new(none<V>(), some<E>(error))
}
type StringBuilder2 : List<string> {
  def append(s string) {
    (self as dynamic).push(s)
  }

  def toString string {
    return "".join(self as List<string>)
  }
}

namespace StringBuilder2 {
  def new StringBuilder2 {
    return List<string>.new as StringBuilder2
  }
}
type Symbol : dynamic {}

namespace Symbol {
  def new(name string) Symbol {
    if RELEASE {
      return List<int>.new as Symbol
    } else {
      return name as Symbol
    }
  }
}
namespace encoding.utf8 {
  # utf32 code points to utf8 bytes
  def encode(codePoints List<int>) List<int> {
    var bytes = List<int>.new
    for codePoint in codePoints {
      assert(codePoint >= 0 && codePoint < 0x110000)
      if codePoint < 0x80 {
        bytes.append(codePoint)
      } else if codePoint < 0x800 {
        bytes.append(0xC0 | (codePoint >> 6))
        bytes.append(0x80 | (codePoint & 0x3F))
      } else if codePoint < 0x10000 {
        bytes.append(0xE0 | (codePoint >> 12))
        bytes.append(0x80 | ((codePoint >> 6) & 0x3F))
        bytes.append(0x80 | (codePoint & 0x3F))
      } else {
        bytes.append(0xF0 | (codePoint >> 18))
        bytes.append(0x80 | ((codePoint >> 12) & 0x3F))
        bytes.append(0x80 | ((codePoint >> 6) & 0x3F))
        bytes.append(0x80 | (codePoint & 0x3F))
      }
    }
    return bytes
  }

  # utf8 bytes to utf32 code points
  def decode(bytes List<int>) List<int> {
    var codePoints = List<int>.new
    var i = 0
    while i < bytes.count {
      var byte = bytes[i]
      if byte < 0x80 {
        codePoints.append(byte)
        i += 1
      } else if (byte & 0xE0) == 0xC0 {
        assert(i + 1 < bytes.count)
        codePoints.append(((byte & 0x1F) << 6) | (bytes[i + 1] & 0x3F))
        i += 2
      } else if (byte & 0xF0) == 0xE0 {
        assert(i + 2 < bytes.count)
        codePoints.append(((byte & 0x0F) << 12) | ((bytes[i + 1] & 0x3F) << 6) | (bytes[i + 2] & 0x3F))
        i += 3
      } else {
        assert(i + 3 < bytes.count)
        codePoints.append(((byte & 0x07) << 18) | ((bytes[i + 1] & 0x3F) << 12) | ((bytes[i + 2] & 0x3F) << 6) | (bytes[i + 3] & 0x3F))
        i += 4
      }
    }
    return codePoints
  }
}
