# Code generated by protoc-gen-sk. DO NOT EDIT.
# Params: "ShuffleFields=no"
# Generated file: google/protobuf/timestamp.proto (google.protobuf)
namespace google.protobuf {
	# message types
	# google.protobuf.Timestamp
	class Timestamp {
		# field definitions
		var __seconds = none<int>()
		var __nanos = none<int>()


		var _unknownFields = List<int>.new

		# field accessors
		def seconds Option<int> {
			return __seconds
		}

		@prefer
		def seconds=(value int) {
			__seconds = some<int>(value)
		}

		def seconds=(value Option<int>) {
			__seconds = value
		}

		def hasSeconds bool {
			return __seconds.isSome
		}

		def nanos Option<int> {
			return __nanos
		}

		@prefer
		def nanos=(value int) {
			__nanos = some<int>(value)
		}

		def nanos=(value Option<int>) {
			__nanos = value
		}

		def hasNanos bool {
			return __nanos.isSome
		}

		# oneofs accessors

		# marshal
		def marshal List<int> {
			var writer = proto.Writer.new
			if __seconds.isSome {
				writer.writeVarInt(1, __seconds.unwrapUnchecked)
			}
			if __nanos.isSome {
				writer.writeVarInt(2, __nanos.unwrapUnchecked)
			}
			writer.write(_unknownFields)
			return writer.buffer
		}

		def marshalObject dynamic {
			var result = {} as dynamic
			if __seconds.isSome {
				result.seconds = __seconds.unwrapUnchecked
			}
			if __nanos.isSome {
				result.nanos = __nanos.unwrapUnchecked
			}
			return result
		}
	}
	namespace Timestamp {
		# unmarshal
		def unmarshal(reader proto.Reader) Timestamp {
			var message = Timestamp.new
			while !reader.done {
				var start = reader.position
				var tag = reader.readTag
				switch tag.fieldNumber {
					case 1 {
						assert(tag.tag == .VARINT)
						message.__seconds = some<int>(reader.readVarInt)
					}
					case 2 {
						assert(tag.tag == .VARINT)
						message.__nanos = some<int>(reader.readVarInt)
					}
					default {
						message._unknownFields.append(reader.readRaw(tag, start))
					}
				}
			}
			return message
		}

		def unmarshal(buffer List<int>) Timestamp {
			return unmarshal(proto.Reader.new(buffer))
		}

		# nested message types

		# nested enum types
		# oneofs
	}

	# wellknown
	class Timestamp {
		def asTime time.Time {
			return asMilliseconds as time.Time
		}
		@alwaysinline
		def asMilliseconds double {
			var s = self.seconds.unwrapOr(0) as double
			var ns = self.nanos.unwrapOr(0) as double
			return s * 1000 + ns / 1000000
		}
	}
	namespace Timestamp {
		def from(value time.Time) Timestamp {
			return fromMilliseconds(value as double)
		}
		@alwaysinline
		def fromMilliseconds(ms double) Timestamp {
			var ts = Timestamp.new
			ts.seconds = (ms / 1000) as int
			ts.nanos = ((ms %% 1000) * 1000000) as int
			return ts
		}
	}

	# enum types

	# services
}
# Generated file: example/demo.proto (tutorial)
namespace tutorial {
	# message types
	# tutorial.Person
	class Person {
		# field definitions
		var __name = none<string>()
		var __id = none<int>()
		var __email = none<string>()
		var __age = none<double>()
		var __phones = List<tutorial.Person.PhoneNumber>.new
		var __lastUpdated = none<google.protobuf.Timestamp>()
		var __scores = List<int>.new
		var __imageUrl = none<string>()
		var __imageData = none<List<int>>()
		var __magicNumbers = List<int>.new

		var _oneof_0 = Person.Avatar.None

		var _unknownFields = List<int>.new

		# field accessors
		def name Option<string> {
			return __name
		}

		@prefer
		def name=(value string) {
			__name = some<string>(value)
		}

		def name=(value Option<string>) {
			__name = value
		}

		def hasName bool {
			return __name.isSome
		}

		def id Option<int> {
			return __id
		}

		@prefer
		def id=(value int) {
			__id = some<int>(value)
		}

		def id=(value Option<int>) {
			__id = value
		}

		def hasId bool {
			return __id.isSome
		}

		def email Option<string> {
			return __email
		}

		@prefer
		def email=(value string) {
			__email = some<string>(value)
		}

		def email=(value Option<string>) {
			__email = value
		}

		def hasEmail bool {
			return __email.isSome
		}

		def age Option<double> {
			return __age
		}

		@prefer
		def age=(value double) {
			__age = some<double>(value)
		}

		def age=(value Option<double>) {
			__age = value
		}

		def hasAge bool {
			return __age.isSome
		}

		def phones List<tutorial.Person.PhoneNumber> {
			return __phones
		}

		def phones=(value List<tutorial.Person.PhoneNumber>) {
			__phones = value
		}

		def lastUpdated Option<google.protobuf.Timestamp> {
			return __lastUpdated
		}

		@prefer
		def lastUpdated=(value google.protobuf.Timestamp) {
			__lastUpdated = some<google.protobuf.Timestamp>(value)
		}

		def lastUpdated=(value Option<google.protobuf.Timestamp>) {
			__lastUpdated = value
		}

		def hasLastUpdated bool {
			return __lastUpdated.isSome
		}

		def scores List<int> {
			return __scores
		}

		def scores=(value List<int>) {
			__scores = value
		}

		def imageUrl Option<string> {
			return __imageUrl
		}

		@prefer
		def imageUrl=(value string) {
			__imageUrl = some<string>(value)
		}

		def imageUrl=(value Option<string>) {
			__imageUrl = value
		}

		def hasImageUrl bool {
			return __imageUrl.isSome
		}

		def imageData Option<List<int>> {
			return __imageData
		}

		@prefer
		def imageData=(value List<int>) {
			__imageData = some<List<int>>(value)
		}

		def imageData=(value Option<List<int>>) {
			__imageData = value
		}

		def hasImageData bool {
			return __imageData.isSome
		}

		def magicNumbers List<int> {
			return __magicNumbers
		}

		def magicNumbers=(value List<int>) {
			__magicNumbers = value
		}

		# oneofs accessors
		def whichAvatar Person.Avatar {
			return _oneof_0
		}

		# marshal
		def marshal List<int> {
			var writer = proto.Writer.new
			if __name.isSome {
				writer.writeString(1, __name.unwrapUnchecked)
			}
			if __id.isSome {
				writer.writeVarInt(2, __id.unwrapUnchecked)
			}
			if __email.isSome {
				writer.writeString(3, __email.unwrapUnchecked)
			}
			if __age.isSome {
				writer.writeInt32(9, proto.internal_encoding.Float.encode(__age.unwrapUnchecked))
			}
			if __phones.count > 0 {
				for item in __phones {
					writer.writeBytes(4, item.marshal)
				}
			}
			if __lastUpdated.isSome {
				writer.writeBytes(5, __lastUpdated.unwrapUnchecked.marshal)
			}
			if __scores.count > 0 {
				if __scores.count == 1 {
					writer.writeVarInt(6, proto.internal_encoding.ZigZag.encode(__scores[0]))
				} else {
					var buffer = proto.Writer.new
					for item in __scores {
						buffer.writeVarInt(proto.internal_encoding.ZigZag.encode(item))
					}
					writer.writeBytes(6, buffer.buffer)
				}
			}
			if __imageUrl.isSome {
				writer.writeString(7, __imageUrl.unwrapUnchecked)
			}
			if __imageData.isSome {
				writer.writeBytes(8, __imageData.unwrapUnchecked)
			}
			if __magicNumbers.count > 0 {
				if __magicNumbers.count == 1 {
					writer.writeInt32(10, proto.internal_encoding.ZigZag.encode(__magicNumbers[0]))
				} else {
					var buffer = proto.Writer.new
					for item in __magicNumbers {
						buffer.writeInt32(proto.internal_encoding.ZigZag.encode(item))
					}
					writer.writeBytes(10, buffer.buffer)
				}
			}
			writer.write(_unknownFields)
			return writer.buffer
		}

		def marshalObject dynamic {
			var result = {} as dynamic
			if __name.isSome {
				result.name = __name.unwrapUnchecked
			}
			if __id.isSome {
				result.id = __id.unwrapUnchecked
			}
			if __email.isSome {
				result.email = __email.unwrapUnchecked
			}
			if __age.isSome {
				result.age = __age.unwrapUnchecked
			}
			result.phones = __phones.map<dynamic>((item) => item.marshalObject)
			if __lastUpdated.isSome {
				result.lastUpdated = __lastUpdated.unwrapUnchecked.marshalObject
			}
			result.scores = __scores.map<dynamic>((item) => item)
			if __imageUrl.isSome {
				result.imageUrl = __imageUrl.unwrapUnchecked
			}
			if __imageData.isSome {
				result.imageData = __imageData.unwrapUnchecked
			}
			result.magicNumbers = __magicNumbers.map<dynamic>((item) => item)
			return result
		}
	}
	namespace Person {
		# unmarshal
		def unmarshal(reader proto.Reader) Person {
			var message = Person.new
			while !reader.done {
				var start = reader.position
				var tag = reader.readTag
				switch tag.fieldNumber {
					case 1 {
						assert(tag.tag == .LEN)
						message.__name = some<string>(reader.readString)
					}
					case 2 {
						assert(tag.tag == .VARINT)
						message.__id = some<int>(reader.readVarInt)
					}
					case 3 {
						assert(tag.tag == .LEN)
						message.__email = some<string>(reader.readString)
					}
					case 9 {
						assert(tag.tag == .I32)
						message.__age = some<double>(proto.internal_encoding.Float.decode(reader.readInt32))
					}
					case 4 {
						assert(tag.tag == .LEN)
						message.__phones.append(tutorial.Person.PhoneNumber.unmarshal(reader.readBytes))
					}
					case 5 {
						assert(tag.tag == .LEN)
						message.__lastUpdated = some<google.protobuf.Timestamp>(google.protobuf.Timestamp.unmarshal(reader.readBytes))
					}
					case 6 {
						if tag.tag == .LEN {
							var buffer = proto.Reader.new(reader.readBytes)
							while !buffer.done {
								message.scores.append(proto.internal_encoding.ZigZag.decode(buffer.readVarInt))
							}
						} else {
							assert(tag.tag == .VARINT)
							message.__scores.append(proto.internal_encoding.ZigZag.decode(reader.readVarInt))
						}
					}
					case 7 {
						assert(tag.tag == .LEN)
						message.__imageUrl = some<string>(reader.readString)
						message._oneof_0 = Person.Avatar.ImageUrl
					}
					case 8 {
						assert(tag.tag == .LEN)
						message.__imageData = some<List<int>>(reader.readBytes)
						message._oneof_0 = Person.Avatar.ImageData
					}
					case 10 {
						if tag.tag == .LEN {
							var buffer = proto.Reader.new(reader.readBytes)
							while !buffer.done {
								message.magicNumbers.append(proto.internal_encoding.ZigZag.decode(buffer.readInt32))
							}
						} else {
							assert(tag.tag == .I32)
							message.__magicNumbers.append(proto.internal_encoding.ZigZag.decode(reader.readInt32))
						}
					}
					default {
						message._unknownFields.append(reader.readRaw(tag, start))
					}
				}
			}
			return message
		}

		def unmarshal(buffer List<int>) Person {
			return unmarshal(proto.Reader.new(buffer))
		}

		# nested message types
		# tutorial.Person.PhoneNumber
		class PhoneNumber {
			# field definitions
			var __number = none<string>()
			var __type = none<tutorial.Person.PhoneType>()


			var _unknownFields = List<int>.new

			# field accessors
			def number string {
				return __number.unwrapOr("+1234567890")
			}

			@prefer
			def number=(value string) {
				__number = some<string>(value)
			}

			def number=(value Option<string>) {
				__number = value
			}

			def hasNumber bool {
				return __number.isSome
			}

			def type tutorial.Person.PhoneType {
				return __type.unwrapOr(tutorial.Person.PhoneType.WORK)
			}

			@prefer
			def type=(value tutorial.Person.PhoneType) {
				__type = some<tutorial.Person.PhoneType>(value)
			}

			def type=(value Option<tutorial.Person.PhoneType>) {
				__type = value
			}

			def hasType bool {
				return __type.isSome
			}

			# oneofs accessors

			# marshal
			def marshal List<int> {
				var writer = proto.Writer.new
				if __number.isSome {
					writer.writeString(1, __number.unwrapUnchecked)
				}
				if __type.isSome {
					writer.writeVarInt(2, __type.unwrapUnchecked)
				}
				writer.write(_unknownFields)
				return writer.buffer
			}

			def marshalObject dynamic {
				var result = {} as dynamic
				if __number.isSome {
					result.number = __number.unwrapUnchecked
				}
				if __type.isSome {
					result.type = __type.unwrapUnchecked.toString
				}
				return result
			}
		}
		namespace PhoneNumber {
			# unmarshal
			def unmarshal(reader proto.Reader) PhoneNumber {
				var message = PhoneNumber.new
				while !reader.done {
					var start = reader.position
					var tag = reader.readTag
					switch tag.fieldNumber {
						case 1 {
							assert(tag.tag == .LEN)
							message.__number = some<string>(reader.readString)
						}
						case 2 {
							assert(tag.tag == .VARINT)
							message.__type = some<tutorial.Person.PhoneType>(reader.readVarInt as tutorial.Person.PhoneType)
						}
						default {
							message._unknownFields.append(reader.readRaw(tag, start))
						}
					}
				}
				return message
			}

			def unmarshal(buffer List<int>) PhoneNumber {
				return unmarshal(proto.Reader.new(buffer))
			}

			# nested message types

			# nested enum types
			# oneofs
		}

		# wellknown

		# nested enum types
		# enum values
		enum PhoneType {
			    MOBILE
			    HOME
			    WORK
		}
		# oneofs
		enum Avatar {
			None
			ImageUrl
			ImageData
		}
	}

	# wellknown
	# tutorial.AddressBook
	class AddressBook {
		# field definitions
		var __people = List<tutorial.Person>.new


		var _unknownFields = List<int>.new

		# field accessors
		def people List<tutorial.Person> {
			return __people
		}

		def people=(value List<tutorial.Person>) {
			__people = value
		}

		# oneofs accessors

		# marshal
		def marshal List<int> {
			var writer = proto.Writer.new
			if __people.count > 0 {
				for item in __people {
					writer.writeBytes(1, item.marshal)
				}
			}
			writer.write(_unknownFields)
			return writer.buffer
		}

		def marshalObject dynamic {
			var result = {} as dynamic
			result.people = __people.map<dynamic>((item) => item.marshalObject)
			return result
		}
	}
	namespace AddressBook {
		# unmarshal
		def unmarshal(reader proto.Reader) AddressBook {
			var message = AddressBook.new
			while !reader.done {
				var start = reader.position
				var tag = reader.readTag
				switch tag.fieldNumber {
					case 1 {
						assert(tag.tag == .LEN)
						message.__people.append(tutorial.Person.unmarshal(reader.readBytes))
					}
					default {
						message._unknownFields.append(reader.readRaw(tag, start))
					}
				}
			}
			return message
		}

		def unmarshal(buffer List<int>) AddressBook {
			return unmarshal(proto.Reader.new(buffer))
		}

		# nested message types

		# nested enum types
		# oneofs
	}

	# wellknown

	# enum types

	# services
}
